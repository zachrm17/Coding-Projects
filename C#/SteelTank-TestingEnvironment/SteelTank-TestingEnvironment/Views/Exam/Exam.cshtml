@using SteelTank_TestingEnvironment.Data.Models
@using SteelTank_TestingEnvironment.Data
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@model List<List<UserAnswer>>
@inject AppDbContext context

<div class="container mt-5 rounded shadow-lg" style="padding: 0px">
    <h3 class="p-3 text-white bg-primary mb-0 rounded-top">Exam</h3>
    <div class="bg-white p-5">
        <form asp-controller="Exam" asp-action="Exam" method="post">
            <input name="registrationId" type="hidden" value="@ViewData["registrationId"]" />
            <div class="row">
                <div class="col-md-4">
                    <nav>
                        <ul class="pagination">
                            <li class="page-item" id="previous"><a class="page-link" id="previous-button" href="#">Previous</a></li>
                            <li class="page-item" id="next"><a class="page-link" id="next-button" href="#">Next</a></li>
                        </ul>
                    </nav>
                </div>
                <div class="col-md-4 text-md-center">
                    <div>
                        <h6 id="timer"></h6>
                        <small class="text-muted">Note: User must submit or save answers before the designated expire time.</small>
                    </div>
                </div>
                <div class="col-md-4 text-md-right">
                    <button name="button" class="btn btn-primary" value="save">Save Answers</button>
                    <button name="button" class="btn btn-primary" onclick="return confirmClick();" value="submit">Submit</button>
                </div>
            </div>
            <div id="pages">
                @{
                    int count = 1;
                    for (; count <= Model.Count; count++)
                    {
                        if (Model[count - 1].Count == 0)
                            continue;

                        <div id="page-@count">
                            <div class="mb-3">
                                <p class="font-weight-bold">@count. @Model[count - 1][0].Question.QuestionGroup.Text</p>
                                <div id="carouselExampleControls-@count" data-interval="false" class="carousel slide"  data-ride="carousel">
                                    <div class="carousel-inner">
                                        @{
                                            var images = context.QuestionGroups.Include(p => p.ImageFiles).FirstOrDefault(p => p.Id == Model[count - 1][0].Question.QuestionGroup.Id);
                                            int imgCount = 0;
                                            foreach (ImageFile file in images.ImageFiles)
                                            {
                                                string imageBase64Data = Convert.ToBase64String(file.Data);
                                                string imageUrl = string.Format("data:image/{0};base64, {1}", file.Extension, imageBase64Data);

                                                if (imgCount == 0)
                                                {
                                                    <div class="carousel-item active">
                                                        <img class="d-block w-100" src="@imageUrl" />
                                                        <p style="color: white;background-color:black;">@file.Name</p>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="carousel-item">
                                                        <img class="d-block w-100" src="@imageUrl" />
                                                        <p style="color: white;background-color:black;">@file.Name</p>
                                                    </div>
                                                }

                                                imgCount++;
                                            }
                                        }
                                    </div>
                                    <a class="carousel-control-prev" href="#carouselExampleControls-@count" role="button" data-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                        <span class="sr-only">Previous</span>
                                    </a>
                                    <a class="carousel-control-next" href="#carouselExampleControls-@count" role="button" data-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                        <span class="sr-only">Next</span>
                                    </a>
                                </div>
                            </div>

                            @for (int i = 0; i < Model[count - 1].Count; i++)
                            {
                                <div class="mb-5">
                                    <div class="mb-3">
                                        <p class="font-weight-bold">@Model[count - 1][i].Question.Text</p>
                                    </div>
                                    <input asp-for="@Model[count - 1][i].Id" type="hidden" value="@Model[count - 1][i].Id" />
                                    @if (Model[count - 1][i].Question.IsTextEntry)
                                    {
                                        <div class="mb-1">
                                            <input asp-for="@Model[count - 1][i].AnswerText" class="form-control" type="text" value="@Model[count - 1][i].AnswerText" />
                                        </div>
                                    }
                                    else
                                    {
                                        List<Answer> answers = Model[count - 1][i].Question.Answers.ToList();
                                        int n = Model[count - 1][i].Question.Answers.Count;
                                        Random rng = new Random();
                                        while (n > 1)
                                        {
                                            n--;
                                            int k = rng.Next(n + 1);
                                            Answer value = answers[k];
                                            answers[k] = answers[n];
                                            answers[n] = value;
                                        }
                                        foreach (var answer in answers)
                                        {
                                            <div class="form-check mb-1">
                                                @if (Model[count - 1][i].AnswerId == answer.Id)
                                                {
                                                    <input asp-for="@Model[count - 1][i].AnswerId" class="form-check-input" type="radio" value="@answer.Id" checked />
                                                }
                                                else
                                                {
                                                    <input asp-for="@Model[count - 1][i].AnswerId" class="form-check-input" type="radio" value="@answer.Id" />
                                                }
                                                <label class="form-check-label">@answer.Text</label>
                                            </div>
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </form>
    </div>
</div>

@section scripts
{
    <script type="text/javascript">
        var remainingMinutes = @ViewData["remainingTime"];

        function SetTimerHTML() {
            var minutes = Math.floor(remainingMinutes % 60);
            var hours = Math.floor((remainingMinutes / 60)%24);
            var days = Math.floor(remainingMinutes / (60 * 24));

            var minutes_string = minutes + ((minutes == 1) ? " minute " : " minutes ");
            var hours_string = hours + ((hours == 1) ? " hour" : " hours ");
            var days_string = days + ((days == 1) ? " day " : " days ");

            var timer_string = ((days > 0) ? days_string : "") + ((hours > 0) ? hours_string : "") + ((minutes > 0) ? minutes_string : "");

            $("#timer").html(timer_string);
        }

        SetTimerHTML();
        var timer = setInterval(function () {
            remainingMinutes -= 1;

            SetTimerHTML();

            if (remainingMinutes <= 0) {
                clearInterval(timer);
                $("#timer").html("<span class='text-danger'>Expired</span>")
            }

        }, 60000);

        // Paging
        var numQuestions = @Model.Count;
        var currQuestion = 1;

        $(document).ready(function () {
            if (!(currQuestion < numQuestions))
                $("#next").addClass("disabled");


            if (!(currQuestion > 1))
                $("#previous").addClass("disabled");

            $(`#pages`).children().hide();
            $(`#page-${currQuestion}`).show();

            $("#next-button").click(function () {
                currQuestion += 1;

                $(`#page-${currQuestion - 1}`).hide();
                $(`#page-${currQuestion}`).show();

                if (currQuestion > 1)
                    $("#previous").removeClass("disabled");
                else
                    $("#previous").addClass("disabled");

                if (currQuestion < numQuestions)
                    $("#next").removeClass("disabled");
                else
                    $("#next").addClass("disabled");
            });

            $("#previous-button").click(function () {
                currQuestion -= 1;

                $(`#page-${currQuestion + 1}`).hide();
                $(`#page-${currQuestion}`).show();

                if (currQuestion > 1)
                    $("#previous").removeClass("disabled");
                else
                    $("#previous").addClass("disabled");

                if (currQuestion < numQuestions)
                    $("#next").removeClass("disabled");
                else
                    $("#next").addClass("disabled");
            });
        });
    </script>
}